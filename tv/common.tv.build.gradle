apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdk compileSdkVer

    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer

        versionName = project.hasProperty('versionName') ? project.versionName : "2.0.0"
        versionCode = project.hasProperty('versionCode') ? project.versionCode.toInteger() : 10000

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testOptions.unitTests.includeAndroidResources = true
    }
    buildFeatures {
        dataBinding true
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_9
        targetCompatibility JavaVersion.VERSION_1_9
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_9.toString()
    }
    signingConfigs {
        releaseKey {}
        qaKey {}
        debugKey {}
    }
    buildTypes.all { ext.apkNameSuffix = null }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.releaseKey
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ""
            apkNameSuffix = ".prod"
        }
        debug {
            shrinkResources false
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debugKey
            applicationIdSuffix ".dev"
            apkNameSuffix = ".dev"
        }
        qa {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.qaKey
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".qa"
            apkNameSuffix = ".qa"
        }
    }
    hilt {
        enableAggregatingTask = true
    }
    applicationVariants.all { variant ->
        String variantName = variant.name.capitalize()
        Task generateLicenseReport = tasks.findByName("generateLicenseReport")
        Task mergeAssets = tasks.findByName("merge${variantName}Assets")
        Task lintVitalAnalyze = tasks.findByName("lintVitalAnalyze${variantName}")
        Task lintVitalReportModel = tasks.findByName("generate${variantName}LintVitalReportModel")

        if (generateLicenseReport != null) {
            if (mergeAssets != null) {
                mergeAssets.dependsOn(generateLicenseReport)
            }
            if (lintVitalAnalyze != null) {
                lintVitalAnalyze.dependsOn(generateLicenseReport)
            }
            if (lintVitalReportModel != null) {
                lintVitalReportModel.dependsOn(generateLicenseReport)
            }
        }

    }
}

dependencies {
    // Backward support for time classes
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation project(':tv')
    implementation project(':network')

    // region Dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt           "com.google.dagger:hilt-compiler:$hilt_version"
    // endregion

    // region Testing libraries
    def junit_version = "4.13.2"
    testImplementation "junit:junit:$junit_version"
    // endregion

    // region AndroidX Test Library
    def androidx_test_version = "1.4.0"
    testImplementation "androidx.test:core-ktx:$androidx_test_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    // endregion

    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    // Backward support for time classes
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}